name: Build/release

on:
  push:
    branches:
      - main
    tags:
      - v*

permissions:
  contents: write

jobs:
  release:
    permissions:
      contents: write
    name: Create Github Release
    if: >
      startsWith(github.ref, 'refs/tags/v') ||
      startsWith(github.event.head_commit.message, 'major(') ||
      startsWith(github.event.head_commit.message, 'hotfix(') ||
      startsWith(github.event.head_commit.message, 'chore(') ||
      startsWith(github.event.head_commit.message, 'test(') ||
      startsWith(github.event.head_commit.message, 'major:') ||
      startsWith(github.event.head_commit.message, 'hotfix:') ||
      startsWith(github.event.head_commit.message, 'chore:') ||
      startsWith(github.event.head_commit.message, 'feat:') ||
      startsWith(github.event.head_commit.message, 'feat(')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Extract commit message body
        id: commit_body
        run: |
          COMMIT_MESSAGE='${{ github.event.head_commit.message }}'
          # Extract everything after the first newline
          COMMIT_BODY=$(echo "$COMMIT_MESSAGE" | tail -n +2)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('dev-{0}', github.sha) }}
          release_name: ${{ github.ref_name }} - Tagline here!
          draft: true
          body: |
            ${{
              startsWith(github.ref, 'refs/tags/v')
                && format(
                  '# Release {0}

                  {1}

                  # How To Install
                  For the simplest installation, download the OpenGameInstaller-Setup.exe file and run it. **If you''re on Steam Deck, download the OpenGameInstaller-Setup.AppImage file.** It includes an auto-updater to keep OpenGameInstaller up-to-date.

                  **Full Changelog:** https://github.com/Nat3z/OpenGameInstaller/compare/{2}...{3}

                  ### Release Details
                  Setup Version: 1.3.1
                  Application Version: {0}',
                  github.ref_name,
                  steps.commit_body.outputs.body,
                  github.event.before,
                  github.ref_name
                )
              || steps.commit_body.outputs.body
            }}
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt
  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Dependencies
        run: bun install && cp -r ./node_modules/electron ./application/node_modules/electron && mkdir -p ./updater/node_modules && cp -r ./node_modules/electron ./updater/node_modules/electron

      - name: Build Release Client
        run: cd application && bun run preelectron-pack && bun run electron-pack

      - name: Build Release Updater
        run: cd updater && bun run electron-pack

      - name: Zip for Windows Portable
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path application/dist/win-unpacked/* -Destination application/dist/OpenGameInstaller-Portable.zip

      - name: Upload Release Portable Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: application/dist/OpenGameInstaller-Portable.zip
          asset_name: OpenGameInstaller-Portable.zip
          asset_content_type: application/zip

      - name: Upload Setup Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: updater/dist/OpenGameInstaller-Setup.exe
          asset_name: OpenGameInstaller-Setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Setup Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: updater/dist/OpenGameInstaller-Setup.AppImage
          asset_name: OpenGameInstaller-Setup.AppImage
          asset_content_type: application/octet-stream

      - name: Upload Release Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: application/dist/OpenGameInstaller-Portable.AppImage
          asset_name: OpenGameInstaller-linux-pt.AppImage
          asset_content_type: application/octet-stream
