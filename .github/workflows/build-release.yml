name: Build/release

on:
  push:
    branches:
      - main
    tags:
      - v*

permissions:
  contents: write

jobs:
  release:
    permissions:
      contents: write
    name: Create Github Release
    if: >
      startsWith(github.ref, 'refs/tags/v') ||
      startsWith(github.event.head_commit.message, 'major(') ||
      startsWith(github.event.head_commit.message, 'hotfix(') ||
      startsWith(github.event.head_commit.message, 'chore(') ||
      startsWith(github.event.head_commit.message, 'test(') ||
      startsWith(github.event.head_commit.message, 'major:') ||
      startsWith(github.event.head_commit.message, 'hotfix:') ||
      startsWith(github.event.head_commit.message, 'chore:') ||
      startsWith(github.event.head_commit.message, 'feat:') ||
      startsWith(github.event.head_commit.message, 'feat(')
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to access tag annotations

      - name: Extract commit message body
        id: commit_body
        run: |
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_EVENT_HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}"
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # For tags, first check if it's an annotated tag
            TAG_TYPE=$(git cat-file -t "${{ github.ref_name }}")
            echo "TAG_TYPE: $TAG_TYPE"
            
            if [[ "$TAG_TYPE" == "tag" ]]; then
              # Annotated tag - get the tag message
              TAG_MESSAGE=$(git tag -l --format='%(contents:body)' "${{ github.ref_name }}" | sed '/^$/d' | sed '/-----BEGIN PGP SIGNATURE-----/,$d')
              echo "ANNOTATED TAG_MESSAGE FOUND: $TAG_MESSAGE"
              if [[ -n "$TAG_MESSAGE" && "$TAG_MESSAGE" != "" ]]; then
                COMMIT_BODY="$TAG_MESSAGE"
              else
                # Even annotated tags might have empty messages, fallback to commit
                COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B" "${{ github.ref_name }}")
                COMMIT_BODY=$(echo "$COMMIT_MESSAGE" | tail -n +2)
              fi
            else
              # Lightweight tag - use the commit message it points to
              echo "LIGHTWEIGHT TAG - using commit message"
              COMMIT_MESSAGE=$(git log -1 --pretty=format:"%B" "${{ github.ref_name }}")
              COMMIT_BODY=$(echo "$COMMIT_MESSAGE" | tail -n +2)
            fi
          else
            # For regular commits, use commit message
            COMMIT_MESSAGE='${{ github.event.head_commit.message }}'
            # Extract everything after the first newline
            COMMIT_BODY=$(echo "$COMMIT_MESSAGE" | tail -n +2)
          fi
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('dev-{0}', github.sha) }}
          name: ${{ startsWith(github.ref, 'refs/tags/v') && format('{0} - Tagline here!', github.ref_name) || github.event.head_commit.message }}
          draft: true
          body: |
            ${{
              startsWith(github.ref, 'refs/tags/v')
                && format(
                  '# Release {0}
            {1}

            **Full Changelog:** https://github.com/Nat3z/OpenGameInstaller/commits/{0}
            # How To Install

            For the simplest installation, download the OpenGameInstaller-Setup.exe file and run it. **If you''re on Steam Deck, download the OpenGameInstaller-Setup.AppImage file.** It includes an auto-updater to keep OpenGameInstaller up-to-date.

            ### Release Details

            Setup Version: {2}
            Application Version: {0}',
                  github.ref_name,
                  steps.commit_body.outputs.body,
                  '1.3.1'
                )
              || steps.commit_body.outputs.body
            }}
          prerelease: false

      - name: Output Release ID
        run: echo "${{ steps.create_release.outputs.id }}" > release_id.txt
      - name: Save Release ID for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_id
          path: release_id.txt
  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for consistency

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install Dependencies
        run: bun install && cp -r ./node_modules/electron ./application/node_modules/electron && mkdir -p ./updater/node_modules && cp -r ./node_modules/electron ./updater/node_modules/electron

      - name: Build Release Client
        run: cd application && bun run preelectron-pack && bun run electron-pack

      - name: Build Release Updater
        run: cd updater && bun run electron-pack

      - name: Zip for Windows Portable
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path application/dist/win-unpacked/* -Destination application/dist/OpenGameInstaller-Portable.zip

      - name: Upload Windows Assets
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('dev-{0}', github.sha) }}
          files: |
            application/dist/OpenGameInstaller-Portable.zip
            updater/dist/OpenGameInstaller-Setup.exe

      - name: Upload Linux Assets
        if: matrix.os == 'ubuntu-latest'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('dev-{0}', github.sha) }}
          files: |
            updater/dist/OpenGameInstaller-Setup.AppImage
            application/dist/OpenGameInstaller-linux-pt.AppImage
